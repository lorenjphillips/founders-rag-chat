Episode: #176 Linus Torvalds (Creator of Linux)
URL: https://podcasts.apple.com/us/podcast/176-linus-torvalds-creator-of-linux/id1141877104?i=1000517660096
Transcribed: /home/lphillips/Dev/apple-podcast-transcribe-mac

--------------------------------------------------------------------------------

During the euphoria of the final years of the 20th century, a revolution was happening among all other revolutions. Seemingly overnight, the Linux operating system caught the world's attention. It had exploded from the small bedroom of its creator, Linus Torvalds, to attract a cultish following of near-militant geeks. Suddenly, it was infuriating the corporate powerhouses controlling the planet. From a party of one, it now counted millions of users on every continent, including Antarctica, and even outer space if you count NASA outposts. Not only was it the most common operating system running server computers dishing out all the content on the World Wide Web, but its very development model, an intricate web of its own, encompassing hundreds of thousands of volunteer computer programmers, had grown to become the largest collaborative project in the history of the world. People wanted to learn more about the kid, who, if he did not start at all, at least jump-started it and was in effect its leader. The trouble was, the more successful Linux and open source became, the less he wanted to talk about it. The accidental revolutionary started Linux because playing on a computer was fun. Revolutionaries aren't born. Revolutions can't be planned. Revolutions can't be managed. Revolutions happen. And sometimes, revolutionaries just get stuck with it. That was an excerpt from the book I'm going to talk to you about today, which is just for fun, the story of an accidental revolutionary, and it was written by Linus Torvalds and David Diamond. I'm going to read part of the back cover because I think when I read this paragraph, this podcast, like the format of this podcast is going to make a lot more sense because this book is written in a very unique way. Before I read that paragraph, though, I got to tell you how I got the idea to do this podcast, or to read this book. Rather, this was another example of a listener recommending a book that I wasn't even aware of. And this book is really interesting, really easy to read. So it says, now in a narrative that zips along with the speed of an email, Torvalds gives a history of his renegade software while candidly revealing the quirky mind of a genius. The result is an engrossing portrayal of a man with a revolutionary vision who challenges our values and may change our world. OK, and one of the things that makes this book unique is not only is it extremely readable because they have these short little chapters. So the idea that it zips along like an email is a good description, but it breaks the fourth wall. They talk, David and Linus, in the book, they talk about writing the book. So at the very beginning, we see an email from Linus saying, OK, he's sending it to David. He's like, all right, I hesitated to write a book. But he he has an idea that he'll he'll submit to the process of writing a book on one condition. And it's the title of the book. And also what I would say is like his his North Star is guiding light on how he approaches life. He says, if you think we can make a fun book and more importantly, if you think we can have fun making it, let's go for it. And the constant use of the word fun is intentional. That is his like I would say his what he feels is the meaning of life and his personal life philosophy. So I'm going to go into that because he talks about he begins the book on the meaning of life and ends the book on what he feels is the meaning of life. And this is another example of them breaking the fourth wall. They're having a conversation in the car, taking a road trip, and they're going back and forth. And David asks him, like, what is what's the meaning of life? What's the answer to that first question? And this is what Linus says. He says, basically, it's short and sweet. It won't give your life any meaning, but it tells you what's going to happen. There are three things that have meaning for life. They are the motivational factors for everything in your life for and for anything that you that you do or any any other living thing does. The first is survival. The second is social order. The third is entertainment. Everything in life. This is he'll repeat this many, many times. So this is extremely important to him that you put these things in order. It also talks about how do you motivate people. So first you have to survive. Then you worry about where you are in relation to other parts, like other people. And then once you progress past that, it's you're meant to have fun. So it says everything in life progresses in that order. And there's nothing after entertainment. So in a sense, the implication is that the meaning of life is to reach that third stage. And once you've reached that third stage, you're done. But you have to go through the other stages first. So what this builds up to is that in the end, we're all here to have fun. We might as well sit down, relax and enjoy the ride. And it's really now that I'm rereading these highlights after I finished the whole book, it's really smart that they put that at the very beginning because he tells you he tells you right at the beginning what's important to him and how he's going to make decisions. And I don't think out of all the other books that I've read so far for the podcast, I don't think I can think of another person that thinks like Linus or is able to communicate as clearly like I can communicate his thoughts to other people is clear. Let me go back to his early life. He begins Linux when he's really, really young. I think he's in his early 20s and he's living in Finland at the time. So it says I was an ugly child. Don't get me wrong. It's not as if I look like the hunchback of Notre Dame. Envision instead large front teeth so that anybody seeing a picture of me in my younger years gets a slightly beaverish impression. Imagine also a complete lack of taste and clothes coupled with an oversized nose. And the picture starts to complete in your mind. Now to add to that picture, start filling in the details. Brown hair, blue eyes, and a slight short sightedness that makes wearing glasses a good idea. Happily, our family wasn't very much into photography. That way there's less incriminating evidence. I was pretty much the youngest in my class at school and that in turn meant the smallest. I was a nerd, a geek. From fairly early on, I didn't duct tape my glasses together, but I might as well have because I had all the other traits. I'm good at math, good at physics, and no social graces whatsoever. And this was before being a nerd was considered a good thing. So now he tells us a little bit about school and I'm going to tie all this together with an idea that I learned from David Olgobie. So he says I might have been a nerd, but on the whole school was good. I got good grades without having to work at it. Never truly great grades because I didn't work at it. And an accepted place, and I had an accepted place in the social order. Nobody else really seemed to care too much about my nose. He talks about his big nose over and over again. This was almost certainly in retrospect because they cared about their own problems a whole lot more. So how does this tie to David Olgobie? So David Olgobie has this idea that when he would go and try to pitch somebody to use the service of his company, he'd start out with all the things they're bad at. And he got the idea from antique dealers who would point out the flaws in what they're trying to sell you first. And telling somebody the flaws up front causes them to trust you. And the more they trust you, the more likely they are to purchase what you're selling, right? And so in this case, the entire first chapter is I'm ugly, I'm lazy, I'm selfish, I have no social skills whatsoever. And this works because it makes the book more refreshing. Over and over again, he talks about the image that he has in the media versus how he actually is. And he always picks the least flattering story. It's almost like he's constantly telling us, listen, I'm human, I have flaws, here they are. Just like everybody, just like every other human has flaws. It's very interesting. Okay, so he becomes interested in programming at a very early age. And I actually listened to a couple talks he gave, they're available on YouTube. And he talks about this over and over again, the fact that he really liked to be able to control computers. And that he felt he didn't have a sense of control with other humans in the real world. So he would kind of escape into this, almost like this world within a world, because he could play God in a sense. You're able to push what the computer can do. You control every single small detail. And now he's trying to give the reader an idea of what it was like to be him when he was younger. He says, you're 12, 13, 14, whatever. Other kids are out playing soccer. Your grandfather's computer is more interesting. His machine is its own world, where logic rules. He talks about in these talks, I don't think he mentioned in the book, but he's like, I don't know if I'm autistic or from the spectrum, but I really want things to make sense. I like them to be logical. And a lot of the world is not logical. So that's why I spend so much time with computers. There are maybe three people in class with computers, and only one of them uses it for the same reasons. You hold weekly meetings. It is the only social activity on the calendar. And this is where we come to find out he becomes obsessed really, really early. No fun could compare to computer fun. With the computer at home, this is after his grandfather died, so now he gets to keep the computer. It was possible to stay up all night with it. I would fake sleep, wait for my mom to go away, jump up and sit in front of the computer. And part of the reason that he was so obsessed with the computer, other than it was a lot of fun, is because he came from a pretty unhappy family life. He winds up, his parents are divorced, his dad spends a lot of time in Moscow. And here he's going to tell us an entire story in just a few sentences. And I love this. He says, the Swedish language has no equivalent to the term dysfunctional family. As a result of the divorce, we didn't have a lot of money. Mom would have to pawn her only investment, the single share of stock in the Helsinki Telephone Company. Now this is a mind-blowing next sentence. Ready? I remember going with her once and feeling embarrassed about it. Now I'm on the board of directors of the same company. I love sentences like that. It made me think of the autobiography of Chung Joo Young, the founder of Hyundai, when he would group an abject poverty in Korea. And he winds up working in a rice shop. And there's a sentence in his autobiography. He's like the delivery, he started off as a delivery boy, do anything possible and two years later he's like the delivery boy had become the owner. Fantastic. So now this is the co-author David Diamond describing Linus. And this is him in 1999. Oh, I forgot to tell you, the book came out right, I think it was published in 2000, 2001. So this is like, most of his early 20s he's working on Linux. And then the book is published, he's around 31 years old at the time. And he's in his 50s now, obviously. So he says that Linus has no handlers, doesn't listen to voicemail, and rarely responds to email. Most acclaimed technologists, even most of the unacclaimed ones, have this immediate desire to let you know how brilliant they are. And that they are critical players in a mission that is far more important than say the struggle for world peace. That's funny, that was true back then, it's even more true today. That wasn't the case with Linus. In fact, his lack of ego seemed downright disarming, and made him uniquely likable amid Silicon Valley's bombastic elite. I found Linus to be unexpectedly knowledgeable about American business history and world politics. Linus would chat away like an uncaged canary. This is only once he... He wasn't like this when he first met David. He started getting more comfortable with him, and so they would spend a lot of time together doing all kinds of things. They would go hiking and race cars and play ping pong and pool, and they're doing that as they're writing the book. So it says he would chatter away like an uncaged canary, confessing his addiction to classic rock and Dean Coons... Coots? Coons? It's an author, I don't know how to pronounce his name. Revealing his weakness for the dumbest sitcoms, and sharing off-the-record family secrets. That is when I realized it made sense to write this book. So it's interesting that David described him as not having an ego. If you read the book, he definitely has an ego. I think what he's talking about there is in the context of other people. This book, once Linux becomes world famous, he winds up moving to America. He wanted to get out of Finland. In fact, a lot of the book he describes Finland and its people, it's actually really interesting. I'm going to share some of what he says in a little bit. But I think what David was talking about there is in terms of other technologists. Once he arrives in America, he's obviously extremely well-known. He's given speeches. He winds up meeting people like Bill Gates, Steve Jobs, Bill Joy, all these other people. What I think he meant is in relation to the people that were of similar stature in the technology industry at the same time, he appeared to have at least didn't display his ego outwardly. Some of the charming parts of the book is how he likes to describe Finland and its people. He says, there are other traits that distinguish the Finns from other members of the human species. For example, there's this silence tradition. Nobody talks much. He talks about moving to when he's in America, people would just come up to you and start talking to you. He thought it was the weirdest thing ever. Finns are stoic to a fault. Silent suffering and fierce determination might be what helped us survive in the face of domination by Russia. A succession of bloody wars and weather that sucks. The country has a history of being quick and confident in the adoption of technology. There are more internet nodes per capita in Finland than in any other country. And just one more thing from his childhood before we go into university and when he starts doing the development. So he says, at this time, there weren't very many people I knew who were as involved in computers as I was. And then he talks about smart kids optimizing for play, which we've seen over and over again. The toy of today is the massive industry of tomorrow. There's a reason that games are always on the cutting edge and why they often are the first... He's talking about in technology, right? There's a reason that games are always on the cutting edge and why they often are the first types of programs that programmers create. Partly it has to do with the fact that some of the smartest programmers out there are 15-year-old kids playing around in their rooms. This is what I thought 16 years ago and I suspect it's still true today. Okay, so fast forward. He's at university and he talks about the power of a book. And this is just fantastic. Now, everybody has a book that changed his or her life. The Holy Bible, Das Kapital, Tuesdays with Mori. Everything I needed to know I learned in kindergarten. Whatever. I sincerely hope that having read the preface and my theory on the meaning of life, you will decide that this book does the trick for you. The book that launched me to new heights was Operating Systems, Design and Implementation by Andrew S. Tannenbaum. In the book, Andrew Tannenbaum, a university professor in Amsterdam, discusses Minix, which is a teaching aid he wrote for Unix. Soon after reading the introduction and learning the philosophy behind Unix and what powerful, clean, beautiful operating system would be capable of doing, I decided to get a machine to run Unix on. I would run Minix, but which was the only version I could find that was fairly useful. As I read and started to understand, I got a big enthusiastic jolt. Frankly, it's never subsided. And this is the most important part. The title of the book is his entire philosophy on life, on work, and everything else. Just for fun. The reason I find this book so appealing, and I'm glad it was recommended to me, is because very few people actually live their lives that way. It's extremely, extremely hard to do so. But it's a really fairly simple operating system. And he talks about his love of simplicity, which I'm going to share some more quotes on in a minute. But he said, I really like the sentence, I hope you can say the same about something. So he's saying, hey, I was a young kid, maybe 19, 20 years old, whatever he is at this time. I got a big enthusiastic jolt. Frankly, it never subsided. So more than a decade later, he's still working on it to this day. So multiple decades later, I hope you can say the same about something. So he starts reading the book, he becomes completely obsessed, and we're going to see, he just starts, he's going to focus on, he's going to sleep, and he's going to write, he was not, I guess I need to back up and tell you. He did not plan on writing his own operating system. It just happened that way. So it says, there were two things I did that summer, nothing, and read the 719 pages of operating systems design and implementation. So now he talks about his philosophy about ugly systems and simplicity and everything that goes into how he approaches his work and the product he built. An ugly system is one in which there are special interfaces for everything you want to do. Unix is the opposite. It gives you the building blocks that are sufficient for doing everything. That's what having a clean design is all about. This is a really fascinating metaphor he uses here. Check this out. And this is where it really sunk in my mind, because I'm not a programmer, and the way he describes, even though I'm not a programmer, hearing somebody speak about something they're passionate about, it's just, it's infectious, it's very attractive, right? So he says, it's the same with languages. The English language has 26 letters, and you can build up everything from those letters. And he's going to compare languages, the difference between the English language and the Chinese language, with complicated operating systems and the ones that he wanted to build, right? Or you have the Chinese language, in which you have one letter for every single thing you can think of. In Chinese, you start off with complexity, and you can combine complexity in limited ways. And he says this is the approach of Windows. So, yeah, remember, this is written in 99, 2000, maybe 2001, so I've covered a bunch of books from this era, including the one I just did a few weeks ago, the Bill Gates one. And it's just everybody's possessor of Microsoft at this point in history. So it says, Unix, on the other hand, comes with a small as beautiful philosophy. It has a small set of simple, basic building blocks that can be combined into something that allows for infinite complexity of expression. Then he gives us the history of where Unix comes from, it came out of 18Tail Bill Labs, but really, this is the punchline, and I really appreciated what he said here. You should absolutely not dismiss simplicity for something easy. It takes design and good taste to be simple. So it's funny that he says that, because that sounds like something exactly... I've heard Steve Jobs say things like that. And so he goes to meet Steve Jobs at this time, this is maybe late 90s, this is when he meets him, and he's like, listen, I disagreed with him about technology, we wound up having arguments, but he's like, I kind of like the guy. It was really interesting. And because the operating system wasn't considered a serious project, back on the history of Unix, by the way, because the operating system wasn't considered a serious project, AT&T didn't think of it as a commercial venture. This is now I'm rereading this, this is going to echo exactly how he thinks about Linux. And I want to go back to the idea we've talked about on several other podcasts we discovered in a lot of these books, most recently the one I did on Roosevelt's crazy adventure in the Amazon jungle about the idea that there's multiple ways, there's always another way to solve the same problem. It's very fascinating that he wants to building successful commercial project, not trying to make it commercial. And then don't worry, it'll make more sense as we continue to go on, because he spends a lot of time going over this, and I thought it was really, really fascinating. Okay, let me go back to this. In fact, AT&T was a regulated monopoly, and one of the things they couldn't do was to sell computers anyway. So the people who created Unix made it available quite freely, along with source licenses, especially to universities. It wasn't a big deal. Okay, so he's obsessed with that book, he starts working and trying to improve Minix, and this is where he accidentally, through a lot of dedication, again, he's just having fun, because he'll tell you over and over again in this book, I'm lazy, I'm lazy, I'm lazy, I don't like working hard, I only do things that are fun. And so this is where he accidentally starts to create Linux. It was March, maybe April. I was spending most of my time in a bathrobe, huddled over my unattractive new computer, with thick black window shades shielding me from the sunlight, not to mention the outside world. I was eking out the monthly payments for my PC, which was scheduled to be paid off in three years. What I didn't know then was that I would only be sending in payments for another year. By then, I would have written Linux, which would be seen by many more people than just Sarah, that's his sister, and Lars, that's his friend. By that time, another person that was interested in Linux, would have started a collection on the internet to get my computer paid off. Everybody knew I wasn't making any money on Linux. People just started saying, let's start a collection to pay off Linus' computer. It was wonderful. I had absolutely no money. I always felt it was important not to have asked for money or begged for money. But the fact is, it was simply given to me. I'm getting choked up, talking about getting choked up, thinking about all these people volunteering to pay off his computer because they loved what he made so much. This is also talked about later in the book, about he started getting a lot of media attention and they compare and contrast, the media automatically compares and contrasts. Linus with Bill Gates, Bill Gates is living in this Xanadu or whatever he calls his 50,000 square foot house. He's a billionaire. Linus is driving a Pontiac and living in, I think, a duplex in San Jose, California at the time. He's like, what people get wrong is they think I'm some kind of monk. He's like, I didn't have money, but I wanted money. I just didn't want to have to get money from selling Linux. And then he winds up later on in life talking about it was a misconception that he didn't like to spend money, he liked nice things. He winds up getting, there's a couple companies that go public in the late 90s, early 2000s, that are built on Linux. They give him stock options. He winds up, in the book it says something like 20 million dollars. And then recently, in an interview, I was actually, let me grab it real quick because I wasn't expecting to talk about it right now. But everybody's always like, how much money does he have? Is he rich or whatever? And in the book he talks about wanting, I think he does buy a multi-million dollar house. And this is him later, I think this quote is from after the book is published. I'll just complete this thought here. First off, this is him writing, First off, I'm actually pretty well off. I live in a good sized house, with a nice yard and deer occasionally showing up and eating my roses. I've got three kids, and I know I can pay for their education. What more do I need? The thing is, being a good programmer actually pays pretty well. Being acknowledged as being world class pays even better. I simply didn't need to start a commercial company. And we're going to talk more about how he thought about it. And why he thought open source is almost like a, how would I put it, it's almost like a way to demonstrate your skill level to the world at large, and doing so you'll be able to reap unexpected benefits later on. So again, I'll share more from the book on that because I think it's one of the most interesting parts. So he says, I didn't need to start a commercial company. I absolutely hate paperwork. I couldn't take care of employees if I tried. He still has the same writing style. A company that I would have started would have never succeeded. It's simply not what I'm interested in. So instead, I have a very good life, doing something that I think is really interesting and something that I think actually matters for people, not just me. And that makes me feel good. And so even as an older person, you see he's echoing that same thing. He's like, I'm not doing anything that's not fun. And I'm not going to just do something that's not fun to have a lot more money when I already have what I need out of life. I have a nice house, I can pay for whatever I need, I have a good computer, and I can pay for my kid's school. So it's really interesting. So this is his mom. I didn't skip over anything, did I? So this is his mom on what... because he wrote this in his mom's tiny apartment. This is his mom on what traits Linus shares with other determined people. When you see a person whose eyes glaze over when a problem presents itself or continues to bug him or her, who then does not hear you talking, who fails to answer any simple question, who becomes totally engrossed in the activity at hand, who is ready to forgo food and sleep in the process of working out a solution, and who does not give up. She's describing her son as he's creating Linux. But again, he's doing this. These are good traits for work, right? It makes you an ambitious, determined person. But it's a lot easier if you actually enjoy what you're doing, right? Steve Jobs, right before he died at the All Things Digital conference, he talked about that. And I look at the video all the time where he's just like, listen, just find something you love to do. And he's like, I'm going to do this. He's like, listen, just find something you love to do. I love to make insanely great products because if you're going to do anything in life that's important, it's going to be hard. And if you love what you do, you won't give up. Most people won't give up. He has this famous quote, like half of what separates successful entrepreneurs from the non-successful is the successful ones don't give up. They persevere. Reading all these biographies, I think he's been proven right so far, right? And again, a way to kind of trick yourself into not giving up is really, really love what you do. So he says, Who does not give up, ever. He or she may be interrupted and in the course of daily life often is, but blithely carries on single-mindedly. Then you know. This is his sister talking about him. He is motivated by honest curiosity and a wish to conquer difficulties as they arise. And to do it, quote unquote, the right way. He talks about that a lot. Because that's the way it is. And he won't give up. Okay, so now I'm going to read several paragraphs. He's talking about the beauty of programming. We're using this for a metaphor, like we always do, right? This is really the way a person who loves their craft speaks. So he's going to talk about programming. This could be Steve Jobs talking about making insanely great products. This is Enzo Ferrari talking about building the world's greatest race car. This could be Henry Royce, the founder of Royce Royce, talking about his desire to make a car better than anything that's ever existed. They all talk the same way, right? I don't know how to really explain my fascination with programming, but I'll try. To somebody who does it, it's the most interesting thing in the world. It's a game much more involved than chess. A game where you can make up your own rules and where the end result is whatever you can make of it. And yet, to the outside, it looks like the most boring thing on earth. Part of the initial excitement in programming is easy to explain. Just the fact that when you tell the computer to do something, it does it. Unairingly, forever, without a complaint. It's a game that's so exciting, that it's never, ever, without a complaint. And that's interesting in itself. But blind obedience on its own, while initially fascinating, obviously does not make for a very likable companion. In fact, that part gets pretty boring fairly quickly. What makes programming so engaging is that while you can make the computer do what you want, you have to figure out how. I'm going to interrupt, there's one more paragraph here, I underline, because I really do speak to how he goes about solving problems. He says, The problem gets solved by thinking about it. I'm personally convinced that computer science has a lot in common with physics. Both are about how the world works at a rather fundamental level. The difference, of course, is that while in physics you're supposed to figure out how the world is made up, in computer science, you create the world. He italicized the word create there. You create the world. Within the confines of the computers, you're the creator. You get to ultimately control everything that happens. If you're good enough, you can be god on a small scale. So, main theme for entrepreneurship whenever you see this, I can just tell you from reading those books, the main reason, a lot of people think entrepreneurs are going to be famous or rich, whatever the case is, maybe they do, a lot of people obviously start companies because if you're successful it has the greatest financial rewards, the number one trait, and I even see this play off in some opinion polls, is control. Control over what you get to do, and that's exactly what he's talking about. Except he has no desire to create anything outside of himself. He talks about, I'm not managing anybody. And that's why he thought leading an open source movement to the degree that he does, I don't even know if he considered the leader. Kind of like an unwilling leader, I would describe him like the way he describes it, at least at this age, I don't know if it's changed throughout the decades. But his idea is like, I'm obsessed with this, I just think it's fun, I'm going to spend all my time doing this, I created something that has a utility for other people, and therefore they can just jump in and do whatever they want to do, and it's just grown from there. Okay, so this is on problem solving, and almost giving up, this is, he's still working on Linux, he says, you can do something the brute force way, this stupid grind the problem down until it's not a problem anymore way, or you can find the right approach, and suddenly the problem just goes away. You look at the problem another way, and you have an epiphany. It was only a problem because you were looking at it the wrong way. And I would say one of the main reasons of reading and picking up this book is actually because he talks about problem solving a lot, and again that can be applied to every single domain. It's still hard to explain what can be so fascinating about beating your head against a wall for three days, not knowing how to solve something, the better way, the beautiful way, but once you find that way, it's the greatest feeling in the world. And then the next few sentences, next sentence actually, is so important. It might be the most important reason that I encourage you to read as many biographies as you possibly can, and it's the fact that no one, there's a quote from James Dyson that I love, he says, everybody gets knocked back, no one rises smoothly to the top without hindrance. The ones who succeed are those who say, right, let's give it another go. Every single book, every single story, you have a fork in the road, they're presented with a fork in the road, on the left, they can go left, give up, or they figure it out and keep going straight or go right or whatever the case is. That's not the best analogy, but I'm going to roll with it. So anyways, this is an example here. This was the point where I almost gave up, thinking it would be too much and not worth it. And really what kept him going is the fact that he had two modes, I'm either programming or I'm doing nothing. So he says, but there wasn't much else I could do, or excuse me, much else to do. And so we see his schedule at the very beginning of creating Linux, and this went on, what I'm about to describe goes on for months. This took a lot of work. A program sleep, program sleep, program eat, program sleep, program shower, briefly, program schedule. By the time I did this, it was clear the project was on its way to becoming an operating system. So I'm skipping ahead a couple of months so he finally sees the very first light that he actually did something that may have a sense of usefulness not only to himself, but other people. I felt a great sense of satisfaction. I think that was particularly important because I hadn't been doing anything that summer except working on the computer. This is not an exaggeration. I rarely even knew if it was day or night, weekend or weekday. But I didn't feel the least bit pathetic. Here's that word again. I was having fun. And so he's talking about the very first version he releases. You really couldn't do anything, but you could see that it was something resembling Unix. In fact, it worked like a very crippled Unix. So I just decided I'd make it available. I wouldn't tell anybody publicly. Instead, I just informed a handful of people by private email. Probably between five and ten people in all. I don't think more than one or two people ever checked it out. When I read that sentence, I thought of, remember that crazy book? I think it's somewhere in the 150s. It's actually right next to me. Overnight Success. It's the book on Fred Smith and the founding of FedEx. I always remember the very first thing about how difficult creating a FedEx from scratch would be. It was an insane, insane book, right? With the very first day they opened FedEx, the plane comes in, and they've been trying to spread the word out. And the first plane comes in, it lands. All the FedEx employees, like midnight, because they have to do this overnight, obviously, they all gather around, and they're like, okay, let's see this bounty. FedEx is going to be a huge, successful company. And they open up the plane. There's six packages, one of which I think Fred sent himself, so five customer packages, the very beginning of what now becomes, you know, this gigantic business. So when I read this part, not only, you know, you start off millions and millions and millions, who knows how many millions of people have used this? Maybe billions? I don't even know. A lot of people have used a device or a computer that uses Linux, but I thought of this quote that Jeff Bezos said in an interview I said with him, or I saw with him rather, we know from our past experiences that big things start small. The biggest oak starts from an acorn. If you want to do anything new, you've got to be willing to let that acorn grow into a little sapling, and then finally into a small tree. And maybe one day, it'll be a big business on its own. And so it slowly starts spreading all over the world, and I just thought this was a fun idea. And so people at the time, there's a huge culture of shareware. So somebody puts something out on the internet for free, usually like a business application, and if you get utility, you send them a check. There's an entire Masters of Doom, I think it's Founders 22, somewhere in there. They talk about, when they first started doing Doom, they talked about being inspired for their business model by shareware. And I think at the time, they put up the first 15 levels of Doom, and they said, hey, if you want the other 30 or 45 or whatever it is, send us some money. And only like 1 to 5%, something like that. I can't remember off the top of my head. Only like 1%, or a very small percent of the amount of people that are playing Doom would actually send in money for the extra levels. But at one point, they were making like $100,000 a day, I think this was in the early 90s. So anyways, a lot of people were saying, they're coming to me, like, oh, this is like shareware, can we send you a check? And he's like, I asked for postcards instead of money from people who use Linux. So I think a lot of these early decisions, they just stuck. And that's why the media, 5 or 10 years later, says, oh, you know, he doesn't want money for services, that's not what he, he's like, no, that's not true. I just didn't expect it to get this big. But the reason I thought this would be a fun idea for postcards, because he says, I was more interested in seeing where people were using Linux. Instead of cash, I preferred postcards. And they poured in from New Zealand, from Japan, from the Netherlands, from the United States. And he's going to tell us a little bit more about his motivation for not wanting money. He's like, listen, if you're going to do money, let me just release Linux for free. And then if there's value added services on top of it, then we can charge and we can still make money that way. It's not that I don't want money. It's just I'm going to make the basic thing for free. And then as I add on to it, I can get paid. So this is how he thought about it when he's in his early 20s. I felt I was following in the footsteps of centuries of scientists and other academics who built their work on the foundations of others, on the shoulders of giants. So this is where he starts talking about, hey, I'm keeping track at the time. You can see how many of these news groups would be, people would gather together, talk about things they were interested in, sports, whatever the case is. And one of the most popular on the internet at the time, I think this was the early 90s, was Linux. And he says, I could easily track the popularity of Linux. And trust me, I kept track. While I might be somebody's idea of a folk hero, I've never been the selfless, ego-free, techno love child the hallucinating press insists I am. And he talks about, I want to do good work. And for me, I want Linux to success. And the definition of that success is a lot of people would use it. And this is where he goes into his, this is some of the most important, what I found interesting, talks about the way he quote unquote manages or approaches work. I did learn fairly early on, the best and most effective way to lead is by letting people do the things, do things because they want to do them, not because you want them to. The best leaders also know when they are wrong and they are capable of pulling themselves out. And the best leaders enable others to make decisions for them. Let me rephrase that. Much of Linux's success can be attributed to my own personality flaws. One, I'm lazy. And two, I like to get the credit for work of others. Otherwise, the Linux development model, if that's what people are calling it, would still be limited to daily email messages among a half a dozen geeks, as opposed to an intricate web of hundreds of thousands of participants. And so he continues that theme. Listen, let's just have people, people, they know what they're interested in. If they want to work on something, they'll volunteer to do that, right? And that will keep me from quitting because he says I divested myself of things that didn't hold much interest for me. So at this point, Linux is already really popular. He's having to spend a lot of time explaining to it for reporters. And in this section, he's really, he talks about that people are astonished that the open source model works. But then he lists some of the incentives that helped it succeed. So I thought this was very fascinating. Open source hackers aren't the high tech counterparts of Mother Teresa. They do get their names associated with their contributions in the form of the credit list or history file that is attached to each project. So it talks about like why are you spending all this hours? People, especially Americans, couldn't understand. It's like you're spending all this time and you're not getting paid. You're getting paid in other ways and then you can monetize that later. The most prolific contributors attract the attention of employers who troll the code, hoping to spot and hire top programmers. Hackers are also motivated in large part by the esteem they can gain in the eyes of their peers by making solid contributions. So it's not a direct monetization. I hate that word. A direct way to make money. But do you think about it? One, it's a very obvious way for a potential employee to realize, wow, this person is really talented. Let me go hire them. Right? Instead of, as opposed to, I think I read somewhere right now, it's like for every remote job, there's like 400, on average, like 400 applicants. Which you turn an outbound process into an inbound process if you think about it like that, right? But two, you're also, because your work is and everybody wants to hear like people value their work, right? So because you're motivated, you're doing good work and then it's a sense of satisfaction for that person, for that individual to hear other people like, hey, that's interesting. Hey, that's good job. So it says hackers also, I just read that part, it's a significant motivating factor. So he's talking about gaining esteem in the eyes of your peers. Everybody wants to impress their peers. Improve their reputation, elevate their social status. Open source development gives programmers that chance. And again, I think that's a I'm glad he makes that distinction because he's like, just because I'm not charging for it doesn't mean money doesn't motivate me. And in fact, he talks about he feels the US system of valued employees making a lot more money than just everybody makes the same like in Finland or similar is a lot better route to go. So he says, by the way, I am totally convinced that the US system of motivating employees is far more realistic and produces better results than the European model. In Finland, if a worker is much better than his colleagues, you give them just a little more money and keep it very quiet. In America, you give them a lot more money. And it works. Another good idea for you. At this point, he decides, hey, I know I'm going to have some life changing decisions. Why don't we just do them all at once? So he's going to move to a new country, get a new job, become a father, and get married all at once. And he's writing a thesis. So he says, I said, yes, he gets he has an opportunity to he's recruited as he was just describing for other people. People like, wow, this guy's really valuable. He's got a ton of job offers. Doesn't like he doesn't go for an interview. They just like we want you. It's interesting how much weather played into it. He found some interesting companies, but he's like, I don't want to deal with the snow and I want to be in California. So that helped him make the choice. So he says, I said, yes, it felt weird. The next thing I did was tell the university would be leaving. That's when the stress really began. For me, it was a giant step that meant there was no turning back. We were having a new child, moving to a new country, and I was leaving the safety nest of the University of Helsinki. He'd been there for like almost a decade. In retrospect, I guess getting all those changes over at once was a good idea, but it was madness. I wrote my thesis over a long weekend and turned it in minutes before taking Tove, that's his soon to be wife, to the hospital to deliver Patricia, who was born 40 hours later. That was December 5th, 1996. Being a father seemed like the most natural thing in the world. Our visas arrived and on February 17th, 1997, we boarded a flight to San Francisco. I remember the temperature in Helsinki, zero degrees Fahrenheit. He talks about this over and over again. I remember Tove's family at the airport crying as we said goodbye. They were very close. I don't remember if my family was there or not. More about his dysfunctional family, right? We landed in the United States. It felt surreal, particularly the 70 degree difference in climate from Finland. I talked about early days in the United States, getting used to everything with the move and getting accustomed to the new job at Transmeta. That's the company he was going to work for. He winds up working for it for a few years. I didn't have a lot of time to devote to Linux during the first couple of months. It was a fairly busy time. We had absolutely no money. I had a great salary, but everything went towards getting furniture, buying a car, doing all the other stuff you'd have to do when you moved to a new country. My computer was on a ship that was inching its way around the Horn of Africa. It was the first period of time when I was quiet on the web and my absence worried a lot of people. It was like, okay, now he's working for a commercial company. I wasn't going to go away. I couldn't think of a way to say that I was just catching my breath. He just needed a break. Oh, and that line where he's like, oh, people are changing now. He's working for a commercial company. He talks about he got a lot of pushback. And again, he's just going to make his own decisions. He's going to be comfortable. Sounds like he's got an inner scorecard, if we go back to that idea Warren Buffett from Warren Buffett as opposed to an outer scorecard. But people are like, oh, you should just work on this for free forever. This is ridiculous. I have skills. I'm going to go work at this company because I think it's interesting. There's a lot of conflict in the book where he just kind of pushes and does whatever he wants to do. He does something smart, though. He gets a job and he gets to work on Linux at work because they're also using it. They're developing some kind of chip, I think. They're going to do hardwares, but they're also using his technology. I could continue to think of Linux as a hobby in which only technology mattered and nothing else held sway over my decisions. My deal with Transmeta was clear. I had been given vague assurances that I could work on Linux during work hours, too. I had been given vague assurances that I could work on Linux during work hours, too. I took full advantage of that. The reason he says he took full advantage of that is because he's like, I'm not one of these people that's going to forego sleep. He thinks that's a bad move. A lot of people believe in working long days and doing double, triple, or even quadruple shifts. I'm not one of them. My job, nor Linux, has ever gotten in the way of a good night's sleep. In fact, if you want to know the honest truth, I'm a firm believer in sleep. Some people think it's being lazy. I have a perfectly good excuse and I'm standing by it. You may lose a few hours of your productive daytime if you sleep, oh, say, about 10 hours a day, but those few hours when you are awake, you're alert and your brain functions on all cylinders. you're alert and your brain functions on all cylinders. That's not the... He's not the only one that feels that way. James Dyson says in his autobiography, if he doesn't sleep at least 10 hours a day, his whole day is ruined. Jeff Bezos talks about he needs at least 8 hours of sleep a night and he makes his best decisions in the morning. So we just see this over and over again. It goes into a little bit of detail about the philosophical difference between Linux and Bill Gates and how Bill Gates actually had him on its target list too. We saw this a few weeks ago in that book Overdrive. It says, so folks who ventured into the depths of Microsoft tell me that they've seen my face on dart boards. So more about how he manages or whatever phrase you want to use it for, Linux. Well, it seemed to amaze them. Next was the administration of Linux. They couldn't grasp how the largest collaborative project in the history of humanity could possibly be managed so effectively when the average 30 person company typically degenerates into something resembling barnyard chaos. Somebody coined the phrase benevolent dictator to describe how I ran the whole thing. The first time I heard the term, all I could think of was some sunny nation general with a dark mustache handing out bananas to his starving masses. I don't know if I feel comfortable with the benevolent dictator image. I control the Linux kernel, the foundation of it all, because so far everybody connected with Linux trusts me more than they trust anyone else. My method for managing the project with hundreds of thousands of developers is the same as it was when I coded away my bedroom. I don't proactively delegate the same point he just described in a different way, right? I don't proactively delegate as much as I wait for people to come forward and volunteer to take over things. It started when I divested myself of the responsibilities I found less interesting. That's also something that repeats. Like the user level code. People step forward and offer to take over the subsystems. Everything filters up to me through the maintenance of the subsystems. I approve or disapprove of their work, but mostly I let things happen naturally. Benevolent dictator? No. I'm just lazy. I try to manage by not making decisions and letting things occur naturally. See how he repeats himself over and over again? Repetition is persuasive. That's when you get the best results. And I think what I love about his simple operating system of life is if you're always optimizing for fun, if you don't get too caught up in your social status or what other people think of you or just chasing money if you already have all your needs met, you're going to enjoy it most. And you see this in one sentence. Most days I wake up thinking I'm the luckiest bastard alive. It talks about a lot of pressure from as it became more and more popular. The press always make up these weird theories. And this is where we see him just, you know, he's like, I have flaws. I've tried to address these flaws. I'll try to address them in the future, but I am what I am to some degree. Anyone reading this column would assume that mounting pressures as my role of chief nerd had turned me into an asshole. But that's wrong. I always was an asshole. I truly always have been an asshole. This isn't anything new. He talks about I, listen, I'm deficient in social skills. I'm not good with people. And the important point, he's not just saying that just to, you know, like, hey, I'm a jerk. I have bad social skills. He's like, it's Linux organized in a way it doesn't matter if I am. So he says the point about open source has never been that I'm more accessible than anybody else. So people start getting mad because he's not responding to their emails or their voicemails or everything else. I've never been that I'm more, it's never been that I'm more accessible than anybody else. It's never been that I'm more open to other people's suggestions. That's never been the issue. The issue is that even if I'm the blackest demon from hell, even if I'm outright evil, people can choose to ignore me because they can just do the stuff themselves. It's not about me being open. It's about them having the power to ignore me. That's important. I thought this part was really interesting. It's really about getting extremely good at something, trying to differentiate yourself, like understanding that the more creative, the more unique what you're making or what you're doing, what you're working on, the more valuable it is. He says, the more valuable it is. He says, human creativity got a price tag, and it turned out to be quite expensive. Creativity is rare. Why? Because most of us just mimic and copy what everybody else is doing, right? Creativity is rare, and as a result, it's not just expensive, but also extremely lucrative. The way to survive, and this is so good, the way to survive and flourish is to make the best damn product you can. And if you can't survive and flourish on that, then you shouldn't. If you can't make a good car, then you deserve to go down like the rock that was the US auto industry. Remember, they talked about David, the co-author talked about, he has a surprisingly deep understanding of US American business history. You deserve to go down like the rock that was the US auto industry in the 1970s. Success is about quality and giving folks what they want. It's not about trying to control people. If you make money by controlling people or a resource, you'll eventually find yourself out of business. This is a form of despotism, and history overflows with examples of its ill effects. So he uses this example, it's like, listen, if you're in the 1800s in the US West, you can control the source of water for local farmers. You start to realize, hey, I'm in a position of power. He goes on for many pages, giving you this synopsis, right? I'm in a position of power. Eventually you become stingy with water, you start overcharging. At some point, somebody else finds a better route. So they invent a technology, invent a product that renders you obsolete, right? So there are technology advances so that pipes can transport water, even from a distance. Either way, as circumstances change, your hold gets broken and you're left with nothing. So that's why he's like, don't try to make a living off of controlling your resource. Just make a better product. He uses an example of the music industry and it's really, really fascinating how he ties this one idea. So really, I'm going to give you the punchline here. Could the entertainment industry not have predicted the obvious? That the price of water would get so high that somebody would devise a new method of piping it from somewhere else. So he's like, listen, you know what you're doing. You're controlling. It's like, we like a few songs from this artist. You put two songs that we like and you put it on an album or a CD. And it's like, I don't want that. So then somebody comes and he's talking about Napster and all the file sharing programs that are really popular at the time he's writing the book. But this is predictable. This has happened and I love this because what he's saying is like, history doesn't repeat, human nature does. Somebody is going to realize, hey, this is a problem. We need to find a way to actually solve the problem because you're the industry that controls this. It's not solving the problem. And so he uses that analogy of water really, really smart that the price of water would get so high that somebody else would devise a new method for piping it in from somewhere else. He says what the incumbent typically does during this, the industry moves to protect its fiefdom and it backfires. It prevents the market from expanding. He talks about just being willing to try to create a product that competes on its merits. That's a sign of a company that isn't blinded by greed or fear of competition. It's a sign of a company that believes in itself and it doesn't have time to hate. And this ties into his idea that no one can really predict the future. He didn't predict the success of Linux. They should just try to, again, that's why it goes back to the title of the book. I know I've said this over and over again, but just do things that you find are fun. And that way, as long as you keep doing that, you won't give up and hopefully that opens up opportunities in the future. He says I've not been a very good predictor of much of anything in my life. Did I predict that this little operating system I started writing for my own use would someday be all over the place? Nope. Took me by surprise it did. My only defense is that no one else seems to do any better at this crystal ball thing either. We can, of course, look to past experience. We can trace in sad detail how, say, an invincible seeming company like AT&T went limp. And we can predict that if we stick around long enough, the weeds will overrun those tidy little green buildings in Redmond someday too. A lot of, again, talk about Microsoft. Call it evolution. It's certainly not rocket science. No business will live forever. Then he talks about, like, I don't try to no one sold Linux as, hey, here's this operating system. No one talks like that. You talk about people want solutions. They don't want products, right? They don't want a drill. They want a quarter inch hole. So it says, it also makes me personally convinced that if we're talking in a big way about operating systems 15 years from now, something is seriously wrong. This may sound strange coming from somebody whose main claim to fame is writing his own operating system. But the fact is, nobody wants an operating system. In fact, nobody even wants a computer. What everybody wants is this magical toy that can be used to browse the web, write term papers, play games, balance the checkbook, and so on. The fact that you need a computer and an operating system to do all this is something that most people would rather not ever think about. And then he talks about, you know, you have to become, the only thing constant life has changed. You have to get comfortable with that. What started out in a messy Helsinki bedroom has grown to become the largest collaborative project in the history of the world. It has been well established that folks do their best work when they're driven by a passion. When they are having fun. This is as true for playwrights and sculptors and entrepreneurs as it is for software engineers. Things change and claiming this isn't so doesn't change the facts. Linux is not the same movement it was five years ago. And Linus isn't the same person he was back then. And part of what makes doing Linux so very interesting to me has been exactly that fact, or the fact that it hasn't been the same. And that new issues have continuously kept coming up. Life would be boring otherwise. So he's describing the importance of fun by describing the opposite. It's interesting, it's challenging, and if I didn't have those interests and challenges it would be boring. In other words, it wouldn't be fun. And I'll close when he goes back to the meaning of life part two. And it kind of wraps up this whole philosophy. Your, that's it. Survival, your place in the social order, and entertainment. The three things that make us do the things we do. Survive, socialize, have fun. That's the progression. And that's also why we chose Just For Fun as the title of the book. Because everything we ever do eventually ends up being for our own entertainment. So what does this all mean? Probably not much. After all, my theory of the meaning of life doesn't actually guide you in what you should be doing. At most it says, yes you can fight it, but in the end, the ultimate goal of life is to have fun. And that is where I'll leave it for the full story. Make sure you read the book. If anything, if the podcast was interesting to you, it's probably a good sign to you rather, you should pick up the book. If anything it might provoke, be thought provoking once you read it. And could eventually change your life. If you want to buy the book and support the podcast at the same time, you can buy it using the link that's in the show notes on your podcast player or go to founderspodcast.com. If you want to support the podcast and support a friend at the same time or a co-worker, if you want to buy them a gift subscription to founders, there's a link to do that as well. It's 176 books down I think and 1000 to go. I'll talk to you again soon.